---
# Source: myapp/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-backend-service
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app: node-backend
---
# Source: myapp/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-frontend
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30009
  selector:
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app: frontend
---
# Source: myapp/templates/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-postgres-service
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app: postgres
---
# Source: myapp/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-backend
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: myapp
      app.kubernetes.io/instance: myapp
      app: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: myapp
        app.kubernetes.io/instance: myapp
        app: backend
    spec:
      containers:
        - name: backend
          image: indhura/backend-image:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          env:
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              value: "password"
            - name: PGDATABASE
              value: "people"
            - name: PGHOST
              value: "myapp-postgres-service"
            - name: PGPORT
              value: "5432"
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: DATABASE_URL
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: NODE_ENV
---
# Source: myapp/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-frontend
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: myapp
      app.kubernetes.io/instance: myapp
      app: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: myapp
        app.kubernetes.io/instance: myapp
        app: frontend
    spec:
      containers:
        - name: frontend
          image: indhura/frontend-image:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          env:
            - name: VUE_APP_API_URL
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: API_URL
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: DATABASE_URL
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: NODE_ENV
---
# Source: myapp/templates/postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-postgres
  labels:
    helm.sh/chart: myapp-0.1.0
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicaCount: 
  selector:
    matchLabels:
      app.kubernetes.io/name: myapp
      app.kubernetes.io/instance: myapp
      app: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: myapp
        app.kubernetes.io/instance: myapp
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: POSTGRES_DB
